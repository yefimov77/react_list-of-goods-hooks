{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","reversed","setReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","prepareGoods","className","type","cn","onClick","map","good","uuidv4","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,kFAbQC,EAA6B,CACxC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,qBAAAA,E,iBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAOMC,EAnCR,SAAsBC,EAAtB,GACyD,IAArDL,EAAoD,EAApDA,UAAWE,EAAyC,EAAzCA,SACPI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,KACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAYcS,CAAanB,EAAiB,CAAEI,YAAWE,aAEhE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SAAU,UACX,CAAE,WAAYlB,IAAcL,EAASe,OAEzCS,QAAS,kBAAMlB,EAAaN,EAASe,OANvC,iCAWA,wBACEO,KAAK,SACLD,UACEE,IAAG,SAAU,aACX,CAAE,WAAYlB,IAAcL,EAASiB,SAEzCO,QAAS,kBAAMlB,EAAaN,EAASiB,SANvC,4BAWA,wBACEK,KAAK,SACLD,UACEE,IAAG,SAAU,aACX,CAAE,YAAahB,IAEnBiB,QAAS,kBAAMhB,GAAaD,IAN9B,sBAWEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA/CI,WACZlB,EAAaN,EAASI,SACtBI,GAAY,IA0CN,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIC,wBCnHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3741632c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer : string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default = '',\n  Name = 'alphabeticaly',\n  Length = 'length',\n}\n\ninterface FunctionArguments {\n  sortField : string,\n  reversed: boolean,\n}\n\nfunction prepareGoods(goods: string[],\n  { sortField, reversed }: FunctionArguments): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Name:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [reversed, setReversed] = useState(false);\n\n  const reset = () => {\n    setSortField(SortType.Default);\n    setReversed(false);\n  };\n\n  const visibleGoods = prepareGoods(goodsFromServer, { sortField, reversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-info',\n              { 'is-light': sortField !== SortType.Name })\n          }\n          onClick={() => setSortField(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-success',\n              { 'is-light': sortField !== SortType.Length })\n          }\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-warning',\n              { 'is-light': !reversed })\n          }\n          onClick={() => setReversed(!reversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={uuidv4()}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}